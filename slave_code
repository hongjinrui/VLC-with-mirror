/*第二次写从机通信，最重要的思想依旧是窗口思想，
 * 从机每次只能看到32个bit，每读取一个新的
 * 电平，让现有的每一位往前左移，把最左边的那一位覆盖掉，
 * 并把新电平放到最右边*/

/*如果想要避免移位这件事，可以将模型优化，
 * 从窗口模型变成wave圆模型
 * 由于是圆模型，下面的代码思想描述中“前”和“后”的概念将都在顺逆时针的含义下表述
 * 首先定义一个变量head表示整个数据的头位
 * 每次新读到一个数据，将数据放到head在的地方，并将head向前循环运行一位
 * 而判断的时候就从head开始，读到head的前一位截止，表示当前的bit*/

#define COMPIN 14//定义通信管脚
#define TJC Serial2//串口屏通信管脚
#define Lenofcommand 20//串口屏控制命令字符串的最长长度

unsigned int wave=0;//存储从这次的窗口看出去，看到的是哪几个电平
int head=1;//永远指向wave逻辑第一位
int current=0;//存储当前读到的电平
unsigned int temp=1;//二进制表示为00000000000000000000001
int isnew=0;//判断本次是否接受的新的变量
char window[4];//将wave按从head开始，还原为窗口显示
char str_any[Lenofcommand];   //在内存中开一块命令缓冲区

void setup() 
{
  pinMode(COMPIN,INPUT);
  Serial.begin(115200);
  TJC.begin(9600);
  Serial.println(sizeof(unsigned int));
  hw_timer_t* tim=timerBegin(0,80,true);//初始化计时器，放在Send函数靠前的位置，表示这个send函数一旦启动，我的计时器就开始工作，计时器主要用于在时间层面上按照bit发送高低电平
  timerAttachInterrupt(tim,&ACept,true);//给定时器绑定中断函数
  timerAlarmWrite(tim, 1000, true);//给定时器设定中断计数的数据，写在第二个参数里,注意这个参数必须保持和主机一致；
  timerAlarmEnable(tim);
}

void loop() 
{
  //还原出当前的整个窗口
  int i=0;//控制window的下标
  int j=1;//控制每一个wave的八位
  int count;//计数，用于控制最大循环的循环次数
  //int temph=head;
  
  for (i=0;i<=3;i++)
  {
    window[i]=0;
  }
  for (count=0;count<=31;count++)
  {
    temp=1;
    i=count/8;
    j=count%8;
    if (wave & (temp<<(32-((head+count-1)%32+1))))
    {
     window[i]=window[i] + pow(2,7-j);
    }
  }
  //判断整个32bit的包头包尾,如果头尾合理就向串口屏传输

  if (window[0]==0x00 && window[1]==0xFF && window[3]==0xAA  && isnew==1)
  {
    //向串口屏输出
    sprintf(str_any,"t0.txt=\"%c\"",window[2]);          //完成要发送的内容的组装
    TJC.print(str_any);        //发送内容
    TJC.print("\xff\xff\xff");
    Serial.println(str_any); 
    isnew=0; 
  }
}

void ACept(void)
{
  delay(1);
  //读电平
  current=digitalRead(COMPIN);
  //赋新值
  temp=1;
  if (current==1)
  {
    temp=temp << (32-head);
    wave |= temp;
    }
   else
   {
    temp=temp << (32-head);
    wave &= ~temp;
    }
  //改变头的位置
  head=head%32+1;
  isnew=1;
}
